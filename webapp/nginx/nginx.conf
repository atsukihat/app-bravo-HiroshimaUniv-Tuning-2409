events {
    worker_connections 1024;
}

http {
    upstream frontend {
        server frontend:3000;
    }

    upstream backend {
        server backend:8080;
    }

    proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=zone1:100m inactive=1d max_size=10g;

    server {
        listen 443 ssl;

        ssl_certificate /da/tls/fullchain1.pem;
        ssl_certificate_key /da/tls/privkey1.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # user_imageのキャッシュ設定を最適化
        location /user_image/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # プロキシキャッシュの設定
            proxy_cache zone1;
            proxy_cache_key $scheme://$host$request_uri$is_args$args;
            proxy_cache_valid 200 10m;
            proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
            add_header X-Proxy-Cache $upstream_cache_status;

            # クライアント側とプロキシ側のキャッシュ設定
            expires 10m;
            add_header Cache-Control "public, max-age=600, s-maxage=600, must-revalidate";
            add_header ETag $upstream_http_etag;
            add_header Last-Modified $upstream_http_last_modified;
            
            # 画像がキャッシュにない場合の処理
            try_files $uri @missing_image;
        }

        # 画像が見つからなかった場合の処理
        location @missing_image {
            return 404 "Image not found";
        }

        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    server {
        listen 80;
        return 301 https://$host$request_uri;
    }
}